#!/bin/bash

# Default values
verbose=false
target_users_list=$USER
partitions=("krummellab")
all_users=false

# Display help message if --help option is provided
if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    echo "Usage: $0 [-v] [-u username] [-p \"partition1|partition2|...\"]"
    echo "Usage: $0 [-v] [-a]"
    echo "Sum the number of cores from active jobs for a username."
    echo "If no username is provided, the current \$USER will be used."
    echo "If no partition is provided, the default partition is krummellab."
    echo "If running with -a (all), no username or partition are needed."
    echo ""
    echo "Options:"
    echo "  -v, --verbose         Enable verbose mode"
    echo "  -u, --user username   Specify a username (default: \$USER)"
    echo "  -a, --all             Run for all users running jobs on krummellab"
    echo "  -p, --partition \"partition1|partition2|...\" Specify one or more partitions in quotes, separated by | (default: krummellab)"
    exit 0
fi

# Parse command-line options
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -a|--all) all_users=true ;;
        -p=*|--partition=*) IFS='|' read -ra partitions <<< "${1#*=}";;
        -p|--partition) IFS='|' read -ra partitions <<< "$2"; shift ;;
        -u=*|--user=*) target_users_list="${1#*=}" ;;
        -u|--user) target_users_list="$2"; shift ;;
        -v|--verbose) verbose=true ;;        
        *) echo "Unknown option: $1"; exit 1 ;;
    esac
    shift
done

if [ "$all_users" = true ]; then
    target_users_list=$(squeue | grep krum | awk '{print $4}' | sort | uniq)
fi

if [ "$verbose" = true ]; then
    echo "Counting cores for ("$target_users_list") on the ${partitions[@]} partition."
    echo "This might take a few seconds..."
fi

total_sum=0
core_collector() {
    local partition="$1"
    local target_user="$2"
    local partition_sum=0

    for monitoring_job_id in $(squeue | grep "${partition:0:9}" | grep "${target_user:0:8}" | awk '{print $1}'); do
        # Use seff to get efficiency and resource usage information for each job
        seff_output=$(/krummellab/data1/rebeccagj/scripts/bash/seff "$monitoring_job_id")
        
        # Extract nodes and cores per node information
        nodes=0
        cores_per_node=0
        nodes=$(echo "$seff_output" | grep -E "Nodes:|Cores:" | awk '{print $2}')
        cores_per_node=$(echo "$seff_output" | grep -E "Cores per node:" | awk '{print $4}')

        # Calculate the cores for the job based on nodes and cores per node
        partition_sum=$((nodes * cores_per_node))

        # Accumulate the total cores value
        ((total_sum += partition_sum))
    done

    echo "$total_sum"
}

for target_user in $target_users_list; do
    total_sum=0  # Reset total_sum variable
    
    # Print the individual partition sums
    for partition in "${partitions[@]}"; do
        partition_sum=0
        partition_sum=$(core_collector "$partition" "$target_user")
        echo "${target_user}'s cores for partition $partition: $partition_sum"
    done

    # Print the total sum
    for partition in "${partitions[@]}"; do
        total_sum=$(core_collector "$partition" "$target_user")
    done
    
    # Print the total sum
    if [ "${#partitions[@]}" -gt 1 ] && [ "$all_users" = false ]; then
        echo "${target_user}'s total sum cores for all partitions: $total_sum"
    fi
done
